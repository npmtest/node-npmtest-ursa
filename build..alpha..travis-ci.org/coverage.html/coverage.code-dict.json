{"/home/travis/build/npmtest/node-npmtest-ursa/test.js":"/* istanbul instrument in package npmtest_ursa */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-ursa/lib.npmtest_ursa.js":"/* istanbul instrument in package npmtest_ursa */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_ursa = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_ursa = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-ursa/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-ursa && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_ursa */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_ursa\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_ursa.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_ursa.rollup.js'] =\n            local.assetsDict['/assets.npmtest_ursa.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_ursa.__dirname + '/lib.npmtest_ursa.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-ursa/node_modules/ursa/lib/ursa.js":"// Copyright 2012 The Obvious Corporation.\n\n/*\n * \"ursa\": RSA crypto, with an emphasis on Buffer objects\n */\n\n/*\n * Modules used\n */\n\n\"use strict\";\n\n// Note: This also forces OpenSSL to be initialized, which is important!\nvar crypto = require(\"crypto\");\n\nvar assert = require(\"assert\");\n\nvar ursaNative = require(\"bindings\")(\"ursaNative\");\nvar RsaWrap    = ursaNative.RsaWrap;\nvar textToNid  = ursaNative.textToNid;\n\n\n/*\n * Variable definitions\n */\n\n/** encoding constant */\nvar BASE64 = \"base64\";\n\n/** encoding constant */\nvar BINARY = \"binary\";\n\n/** encoding constant */\nvar HEX = \"hex\";\n\n/** type name */\nvar STRING = \"string\";\n\n/** encoding constant */\nvar UTF8 = \"utf8\";\n\n/** hash algorithm constant */\nvar MD5 = \"md5\";\n\n/** regex that matches PEM files, capturing the file type */\nvar PEM_REGEX =\n    /^(-----BEGIN (.*) KEY-----\\r?\\n[:\\s,-\\/+=a-zA-Z0-9\\r\\n]*\\r?\\n-----END \\2 KEY-----\\r?\\n)/m;\n\n/** \"unsealer\" key object to authenticate objects */\nvar theUnsealer = [ \"ursa unsealer\" ];\n\n\n/*\n * Helper functions\n */\n\n/**\n * Return true iff x is either a string or a Buffer.\n */\nfunction isStringOrBuffer(x) {\n    return (typeof x === STRING) || Buffer.isBuffer(x);\n}\n\n/**\n * Extract and identify the PEM file type represented in the given\n * buffer. Returns the extracted type string or undefined if the\n * buffer doesn't seem to be any sort of PEM format file.\n */\nfunction identifyPemType(buf) {\n    var str = encodeBuffer(buf, UTF8);\n    var match = PEM_REGEX.exec(str);\n\n    if (!match) {\n        return undefined;\n    }\n\n    return match[2];\n}\n\n/**\n * Return whether the given buffer or string appears (trivially) to be a\n * valid public key file in PEM format.\n */\nfunction isPublicKeyPem(buf) {\n    var kind = identifyPemType(buf);\n    return (kind == \"PUBLIC\");\n}\n\n/**\n * Return whether the given buffer or string appears (trivially) to be a\n * valid private key file in PEM format.\n */\nfunction isPrivateKeyPem(buf) {\n    var kind = identifyPemType(buf);\n    return (kind == \"RSA PRIVATE\");\n}\n\n/**\n * Return a buffer containing the encoding of the given bigint for use\n * as part of an SSH-style public key file. The input value must be a\n * buffer representing an unsigned bigint in big-endian order.\n */\nfunction toSshBigint(value) {\n    // The output is signed, so we need to add an extra 00 byte at the\n    // head if the high-order bit is set.\n    var prefix00 = ((value[0] & 0x80) !== 0);\n    var length = value.length + (prefix00 ? 1 : 0);\n    var result = new Buffer(length + 4);\n    var offset = 0;\n\n    result.writeUInt32BE(length, offset);\n    offset += 4;\n\n    if (prefix00) {\n\tresult[offset] = 0;\n\toffset++;\n    }\n\n    value.copy(result, offset);\n    return result;\n}\n\n/**\n * Create and return a buffer containing an SSH-style public key file for\n * the given RsaWrap object.\n *\n * For the record, an SSH-style public key file consists of three\n * concatenated values, each one length-prefixed:\n *\n *     literal string \"ssh-rsa\"\n *     exponent\n *     modulus\n *\n * The literal string header is length-prefixed.  The two numbers are\n * represented as signed big-int values in big-endian order, also\n * length-prefixed.\n */\nfunction createSshPublicKey(rsa) {\n    var e = toSshBigint(rsa.getExponent());\n    var m = toSshBigint(rsa.getModulus());\n\n    var header = toSshBigint(new Buffer(\"ssh-rsa\", UTF8));\n    var result = new Buffer(header.length + m.length + e.length);\n    var offset = 0;\n\n    header.copy(result, offset);\n    offset += header.length;\n    e.copy(result, offset);\n    offset += e.length;\n    m.copy(result, offset);\n\n    return result;\n}\n\n/**\n * Validate the given encoding name. Throws an exception if invalid.\n */\nfunction validateEncoding(encoding) {\n    switch (encoding) {\n        case BASE64:\n        case BINARY:\n        case HEX:\n        case UTF8: {\n            // These are all valid.\n            break;\n        }\n        default: {\n            throw new Error(\"Invalid encoding: \" + encoding);\n        }\n    }\n}\n\n/**\n * Convert a buffer into an appropriately-encoded string, or return it\n * unmodified if the encoding is undefined.\n */\nfunction encodeBuffer(buf, encoding) {\n    if (encoding === undefined) {\n        return buf;\n    }\n\n    validateEncoding(encoding);\n    return buf.toString(encoding);\n}\n\n/**\n * Return a buffer or undefined argument as-is, or convert a given\n * string into a buffer by using the indicated encoding. An undefined\n * encoding is interpreted to mean UTF8.\n */\nfunction decodeString(str, encoding) {\n    if ((str === undefined) || Buffer.isBuffer(str)) {\n        return str;\n    }\n\n    if (encoding === undefined) {\n        encoding = UTF8;\n    }\n\n    validateEncoding(encoding);\n    return new Buffer(str, encoding);\n}\n/**\n * OpenSSH Public key to RSA\n * @param {String|Object} key OpenSSH Public Key\n * @param <String> key encoding, default 'base64'\n * @returns {PublicKey}\n */\nfunction openSshPublicKey(key, encoding) {\n    if (!Buffer.isBuffer(key)) {\n        key = key.substr(0, 3) === 'ssh' ? key.split(' ')[1] : key;\n        key = new Buffer(key, encoding || 'base64');\n    }\n\n    function parsePublicKey(key) {\n        var parts = [],\n            partsLength = 3;\n\n        while(key.length) {\n            var dLen = key.readInt32BE(0);\n            var data = key.slice(4, dLen+4);\n            key = key.slice(4+dLen);\n            parts.push(data);\n            if (!(--partsLength)) break;\n        }\n\n        return {\n            modulus :   parts[2],\n            exponent:   parts[1],\n            type    :   parts[0]\n        };\n    }\n\n    var pubKey = parsePublicKey(key);\n    var rsa = new RsaWrap();\n\n    if (pubKey.type != 'ssh-rsa') {\n        throw new TypeError('Only \"ssh-rsa\" format supported');\n    }\n\n    rsa.openPublicSshKey(pubKey.modulus, pubKey.exponent);\n\n    return PublicKey(rsa);\n}\n\n/**\n * Public Key object. This is the externally-visible object that one gets\n * when constructing an instance from a public key. The constructor takes\n * a native RsaWrap object.\n */\nfunction PublicKey(rsa) {\n    var self;\n\n    function getExponent(encoding) {\n        return encodeBuffer(rsa.getExponent(), encoding);\n    }\n\n    function getModulus(encoding) {\n        return encodeBuffer(rsa.getModulus(), encoding);\n    }\n\n    function toPublicPem(encoding) {\n        return encodeBuffer(rsa.getPublicKeyPem(), encoding);\n    }\n\n    function toPublicSsh(encoding) {\n        return encodeBuffer(createSshPublicKey(rsa), encoding);\n    }\n\n    function toPublicSshFingerprint(encoding) {\n        return sshFingerprint(createSshPublicKey(rsa), undefined, encoding);\n    }\n\n    function encrypt(buf, bufEncoding, outEncoding, padding) {\n        buf = decodeString(buf, bufEncoding);\n        padding = (padding === undefined) ?\n                ursaNative.RSA_PKCS1_OAEP_PADDING : padding;\n        return encodeBuffer(rsa.publicEncrypt(buf, padding), outEncoding);\n    }\n\n    function publicDecrypt(buf, bufEncoding, outEncoding, padding) {\n        buf = decodeString(buf, bufEncoding);\n        padding = (padding === undefined) ?\n                ursaNative.RSA_PKCS1_PADDING : padding;\n        return encodeBuffer(rsa.publicDecrypt(buf, padding), outEncoding);\n    }\n\n    function verify(algorithm, hash, sig, encoding) {\n        algorithm = textToNid(algorithm);\n        hash = decodeString(hash, encoding);\n        sig = decodeString(sig, encoding);\n        return rsa.verify(algorithm, hash, sig);\n    }\n\n    function hashAndVerify(algorithm, buf, sig, encoding,\n                           use_pss_padding, salt_len) {\n        if (use_pss_padding) {\n            sig = publicDecrypt(sig, encoding, undefined,\n                                ursaNative.RSA_NO_PADDING);\n\n            var hash = crypto.createHash(algorithm);\n            hash.update(decodeString(buf, encoding));\n            buf = new Buffer(hash.digest(BINARY), BINARY);\n\n            return rsa.verifyPSSPadding(textToNid(algorithm), buf, sig,\n                    (salt_len === undefined) ? ursaNative.RSA_PKCS1_SALT_LEN_HLEN : salt_len);\n        } else {\n            var verifier = createVerifier(algorithm);\n            verifier.update(buf, encoding);\n            return verifier.verify(self, sig, encoding);\n        }\n    }\n\n    function unseal(unsealer) {\n        return (unsealer === theUnsealer) ? self : undefined;\n    }\n\n    self = {\n        encrypt:                encrypt,\n        getExponent:            getExponent,\n        getModulus:             getModulus,\n        hashAndVerify:          hashAndVerify,\n        publicDecrypt:          publicDecrypt,\n        toPublicPem:            toPublicPem,\n        toPublicSsh:            toPublicSsh,\n        toPublicSshFingerprint: toPublicSshFingerprint,\n        verify:                 verify,\n        unseal:                 unseal\n    };\n\n    return self;\n}\n\n/**\n * Private Key object. This is the externally-visible object that one\n * gets when constructing an instance from a private key (aka a\n * keypair). The constructor takes a native RsaWrap object.\n */\nfunction PrivateKey(rsa) {\n    var self;\n\n    function getPrivateExponent(encoding) {\n        return encodeBuffer(rsa.getPrivateExponent(), encoding);\n    }\n\n    function toPrivatePem(encoding) {\n        return encodeBuffer(rsa.getPrivateKeyPem(), encoding);\n    }\n\n    function toEncryptedPrivatePem(passPhrase, cipher, encoding) {\n        if(!passPhrase) return toPrivatePem(encoding);\n        return encodeBuffer(rsa.getPrivateKeyPem(passPhrase, cipher));\n    }\n\n    function decrypt(buf, bufEncoding, outEncoding, padding) {\n        buf = decodeString(buf, bufEncoding);\n        padding = (padding === undefined) ? ursaNative.RSA_PKCS1_OAEP_PADDING : padding;\n        return encodeBuffer(rsa.privateDecrypt(buf, padding), outEncoding);\n    }\n\n    function privateEncrypt(buf, bufEncoding, outEncoding, padding) {\n        buf = decodeString(buf, bufEncoding);\n        padding = (padding === undefined) ? ursaNative.RSA_PKCS1_PADDING : padding;\n        return encodeBuffer(rsa.privateEncrypt(buf, padding), outEncoding);\n    }\n\n    function sign(algorithm, hash, hashEncoding, outEncoding) {\n        algorithm = textToNid(algorithm);\n        hash = decodeString(hash, hashEncoding);\n        return encodeBuffer(rsa.sign(algorithm, hash), outEncoding);\n    }\n\n    function hashAndSign(algorithm, buf, bufEncoding, outEncoding,\n                         use_pss_padding, salt_len) {\n        if (use_pss_padding) {\n            var hash = crypto.createHash(algorithm);\n            hash.update(decodeString(buf, bufEncoding));\n            buf = new Buffer(hash.digest(BINARY), BINARY);\n\n            buf = rsa.addPSSPadding(textToNid(algorithm), buf,\n                    (salt_len === undefined) ? ursaNative.RSA_PKCS1_SALT_LEN_HLEN : salt_len);\n\n            return privateEncrypt(buf, undefined, outEncoding,\n                                  ursaNative.RSA_NO_PADDING);\n        } else {\n            var signer = createSigner(algorithm);\n            signer.update(buf, bufEncoding);\n            return signer.sign(self, outEncoding);\n        }\n    }\n\n    self = PublicKey(rsa);\n    self.decrypt                = decrypt;\n    self.getPrivateExponent     = getPrivateExponent;\n    self.hashAndSign            = hashAndSign;\n    self.privateEncrypt         = privateEncrypt;\n    self.sign                   = sign;\n    self.toPrivatePem           = toPrivatePem;\n    self.toEncryptedPrivatePem  = toEncryptedPrivatePem;\n    return self;\n}\n\n\n/*\n * Exported bindings\n */\n\n/**\n * Create a new public key object, from the given PEM-encoded file.\n */\nfunction createPublicKey(pem, encoding) {\n    var rsa = new RsaWrap();\n    pem = decodeString(pem, encoding);\n\n    try {\n        rsa.setPublicKeyPem(pem);\n    } catch (ex) {\n        if (!isPublicKeyPem(pem)) {\n            throw new Error(\"Not a public key.\");\n        }\n        throw ex;\n    }\n\n    return PublicKey(rsa);\n}\n\n/**\n * Create a new private key object, from the given PEM-encoded file,\n * optionally decrypting the file with a password.\n */\nfunction createPrivateKey(pem, password, encoding) {\n    var rsa = new RsaWrap();\n    pem = decodeString(pem, encoding);\n    password = decodeString(password, encoding);\n\n    try {\n        // Note: The native code is sensitive to the actual number of\n        // arguments. It's *not* okay to pass undefined as a password.\n        if (password) {\n            rsa.setPrivateKeyPem(pem, password);\n        } else {\n            rsa.setPrivateKeyPem(pem);\n        }\n    } catch (ex) {\n        if (!isPrivateKeyPem(pem)) {\n            throw new Error(\"Not a private key.\");\n        }\n        throw ex;\n    }\n\n    return PrivateKey(rsa);\n}\n\n/**\n  * Create public key from components\n  */\nfunction createPublicKeyFromComponents(modulus, exponent) {\n    var rsa = new RsaWrap();\n    rsa.createPublicKeyFromComponents(modulus, exponent);\n    return PublicKey(rsa);\n}\n\n/**\n * Create private key from components\n */\nfunction createPrivateKeyFromComponents(modulus, exponent, p, q, dp, dq, inverseQ, d) {\n    var rsa = new RsaWrap();\n    rsa.createPrivateKeyFromComponents(modulus, exponent, p, q, dp, dq, inverseQ, d);\n\n    return PrivateKey(rsa);\n}\n\n/**\n * Generate a new private key object (aka a keypair).\n */\nfunction generatePrivateKey(modulusBits, exponent) {\n    if (modulusBits === undefined) {\n        modulusBits = 2048;\n    }\n\n    if (exponent === undefined) {\n        exponent = 65537;\n    }\n\n    var rsa = new RsaWrap();\n    rsa.generatePrivateKey(modulusBits, exponent);\n\n    return PrivateKey(rsa);\n}\n\n/**\n * Create a key object from a PEM format file, either a private or\n * public key depending on what kind of file is passed in. If given\n * a private key file, it must not be encrypted.\n */\nfunction createKey(pem, encoding) {\n    pem = decodeString(pem, encoding);\n\n    if (isPublicKeyPem(pem)) {\n        return createPublicKey(pem);\n    } else if (isPrivateKeyPem(pem)) {\n        return createPrivateKey(pem);\n    } else {\n        throw new Error(\"Not a key.\");\n    }\n}\n\n/**\n * Return the SSH-style public key fingerprint of the given SSH-format\n * public key.\n */\nfunction sshFingerprint(sshKey, sshEncoding, outEncoding) {\n    var hash = crypto.createHash(MD5);\n\n    hash.update(decodeString(sshKey, sshEncoding));\n    var result = new Buffer(hash.digest(BINARY), BINARY);\n    return encodeBuffer(result, outEncoding);\n}\n\n/**\n * Return whether the given object is a key object (either public or\n * private), as constructed by this module.\n */\nfunction isKey(obj) {\n    var obj2;\n\n    try {\n        var unseal = obj.unseal;\n        if (typeof unseal !== \"function\") {\n            return false;\n        }\n        obj2 = unseal(theUnsealer);\n    } catch (ex) {\n        // Ignore; can't assume that other objects obey any particular\n        // unsealing protocol.\n        // TODO: Log?\n        return false;\n    }\n\n    return obj2 !== undefined;\n}\n\n/**\n * Return whether the given object is a private key object, as\n * constructed by this module.\n */\nfunction isPrivateKey(obj) {\n    return isKey(obj) && (obj.decrypt !== undefined);\n}\n\n/**\n * Return whether the given object is a public key object (per se), as\n * constructed by this module.\n */\nfunction isPublicKey(obj) {\n    return isKey(obj) && !isPrivateKey(obj);\n}\n\n/**\n * Assert wrapper for isKey().\n */\nfunction assertKey(obj) {\n    assert(isKey(obj));\n}\n\n/**\n * Assert wrapper for isPrivateKey().\n */\nfunction assertPrivateKey(obj) {\n    assert(isPrivateKey(obj));\n}\n\n/**\n * Assert wrapper for isPublicKey().\n */\nfunction assertPublicKey(obj) {\n    assert(isPublicKey(obj));\n}\n\n/**\n * Coerce the given key value into an private key object, returning\n * it. If given a private key object, this just returns it as-is. If\n * given a string or Buffer, it tries to parse it as PEM. Anything\n * else is an error.\n */\nfunction coercePrivateKey(orig) {\n    if (isPrivateKey(orig)) {\n        return orig;\n    } else if (isStringOrBuffer(orig)) {\n        return createPrivateKey(orig);\n    }\n\n    throw new Error(\"Not a private key: \" + orig);\n}\n\n/**\n * Coerce the given key value into a public key object, returning\n * it. If given a private key object, this just returns it as-is. If\n * given a string or Buffer, it tries to parse it as PEM. Anything\n * else is an error.\n */\nfunction coercePublicKey(orig) {\n    if (isPublicKey(orig)) {\n        return orig;\n    } else if (isStringOrBuffer(orig)) {\n        return createPublicKey(orig);\n    }\n\n    throw new Error(\"Not a public key: \" + orig);\n}\n\n/**\n * Coerce the given key value into a key object (either public or\n * private), returning it. If given a private key object, this just\n * returns it as-is. If given a string or Buffer, it tries to parse it\n * as PEM. Anything else is an error.\n */\nfunction coerceKey(orig) {\n    if (isKey(orig)) {\n        return orig;\n    } else if (isStringOrBuffer(orig)) {\n        return createKey(orig);\n    }\n\n    throw new Error(\"Not a key: \" + orig);\n}\n\n/**\n * Check whether the two objects are both keys of some sort and\n * have the same public part.\n */\nfunction matchingPublicKeys(key1, key2) {\n    if (!(isKey(key1) && isKey(key2))) {\n        return false;\n    }\n\n    // This isn't the most efficient implementation, but it will suffice:\n    // We convert both to ssh form, which has very little leeway for\n    // variation, and compare bytes.\n\n    var ssh1 = key1.toPublicSsh(UTF8);\n    var ssh2 = key2.toPublicSsh(UTF8);\n\n    return ssh1 === ssh2;\n}\n\n/**\n * Check whether the two objects are both keys of some sort, are\n * both public or both private, and have the same contents.\n */\nfunction equalKeys(key1, key2) {\n    // See above for rationale. In this case, there's no ssh form for\n    // private keys, so we just use PEM for that.\n\n    if (isPrivateKey(key1) && isPrivateKey(key2)) {\n        var pem1 = key1.toPrivatePem(UTF8);\n        var pem2 = key2.toPrivatePem(UTF8);\n        return pem1 === pem2;\n    }\n\n    if (isPublicKey(key1) && isPublicKey(key2)) {\n        return matchingPublicKeys(key1, key2);\n    }\n\n    return false;\n}\n\n/**\n * Create a signer object.\n */\nfunction createSigner(algorithm) {\n    var hash = crypto.createHash(algorithm);\n    var self = {};\n\n    function update(buf, bufEncoding) {\n        buf = decodeString(buf, bufEncoding);\n        hash.update(buf);\n        return self;\n    }\n\n    function sign(privateKey, outEncoding) {\n        var hashBuf = new Buffer(hash.digest(BINARY), BINARY);\n        return privateKey.sign(algorithm, hashBuf, undefined, outEncoding);\n    }\n\n    self.sign = sign;\n    self.update = update;\n    return self;\n}\n\n/**\n * Create a verifier object.\n */\nfunction createVerifier(algorithm) {\n    var hash = crypto.createHash(algorithm);\n    var self = {};\n\n    function update(buf, bufEncoding) {\n        buf = decodeString(buf, bufEncoding);\n        hash.update(buf);\n        return self;\n    }\n\n    function verify(publicKey, sig, sigEncoding) {\n        var hashBuf = new Buffer(hash.digest(BINARY), BINARY);\n        sig = decodeString(sig, sigEncoding);\n        return publicKey.verify(algorithm, hashBuf, sig);\n    }\n\n    self.update = update;\n    self.verify = verify;\n    return self;\n}\n\n\n/*\n * Initialization\n */\n\nmodule.exports = {\n    assertKey:                      assertKey,\n    assertPrivateKey:               assertPrivateKey,\n    assertPublicKey:                assertPublicKey,\n    coerceKey:                      coerceKey,\n    coercePrivateKey:               coercePrivateKey,\n    coercePublicKey:                coercePublicKey,\n    createKey:                      createKey,\n    createPrivateKey:               createPrivateKey,\n    createPrivateKeyFromComponents: createPrivateKeyFromComponents,\n    openSshPublicKey:               openSshPublicKey,\n    createPublicKey:                createPublicKey,\n    createPublicKeyFromComponents:  createPublicKeyFromComponents,\n    createSigner:                   createSigner,\n    createVerifier:                 createVerifier,\n    equalKeys:                      equalKeys,\n    generatePrivateKey:             generatePrivateKey,\n    isKey:                          isKey,\n    isPrivateKey:                   isPrivateKey,\n    isPublicKey:                    isPublicKey,\n    matchingPublicKeys:             matchingPublicKeys,\n    sshFingerprint:                 sshFingerprint,\n    RSA_NO_PADDING:                 ursaNative.RSA_NO_PADDING,\n    RSA_PKCS1_PADDING:              ursaNative.RSA_PKCS1_PADDING,\n    RSA_PKCS1_OAEP_PADDING:         ursaNative.RSA_PKCS1_OAEP_PADDING,\n    RSA_PKCS1_SALT_LEN_HLEN:        ursaNative.RSA_PKCS1_SALT_LEN_HLEN,\n    RSA_PKCS1_SALT_LEN_MAX:         ursaNative.RSA_PKCS1_SALT_LEN_MAX,\n    RSA_PKCS1_SALT_LEN_RECOVER:     ursaNative.RSA_PKCS1_SALT_LEN_RECOVER\n};\n"}